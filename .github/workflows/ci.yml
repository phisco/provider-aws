name: ci

on:
  push:
    branches:
      - main
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # common versions
  go_version: '1.19'
  golangci_version: 'v1.50.0'
  docker_buildx_version: 'v0.8.2'

  # common users. we can't run a step 'if secrets.xxx != ""' but we can run a
  # step 'if env.xxx' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  # UPBOUND_MARKETPLACE_PUSH_ROBOT_USR: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR }}
  # UPBOUND_MARKETPLACE_PUSH_ROBOT_PSW: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_PSW }}

jobs:
  detect-noop:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: detect no-op changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          github_token: ${{ secrets.github_token }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint-xp:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-

      - name: Cache Go Dependencies
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' to ensure our desired Go version, but we prefer
      # this action because it leaves 'annotations' (i.e. it comments on PRs to
      # point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@08e2f20817b15149a52b5b3ebe7de50aff2ba8c5 # v3
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          skip-cache: true # We do our own caching.

  lint:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: find the go build cache
        id: go
        run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

      - name: cache the go build cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashfiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-

      - name: vendor dependencies
        run: make vendor vendor.check

      # we could run 'make lint' but we prefer this action because it leaves
      # 'annotations' (i.e. it comments on prs to point out linter violations).
      - name: lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.golangci_version }}

  check-diff:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: install goimports
        run: |
          cd /tmp
          go install golang.org/x/tools/cmd/goimports@v0.1.12

      - name: find the go build cache
        id: go
        run: echo "cache=$(make go.cachedir)" >> $github_output

      - name: cache the go build cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-check-diff-${{ hashfiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-check-diff-

      - name: vendor dependencies
        run: make vendor vendor.check

      - name: check diff
        id: check-diff
        run: |
          make check-diff

      - name: show diff
        if: failure() && steps.check-diff.outcome == 'failure'
        run: git diff

  unit-tests:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: fetch history
        run: git fetch --prune --unshallow

      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: find the go build cache
        id: go
        run: echo "cache=$(make go.cachedir)" >> $github_output

      - name: cache the go build cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashfiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-unit-tests-

      - name: vendor dependencies
        run: make vendor vendor.check

      - name: run unit tests
        run: make -j2 test

      - name: publish unit test coverage
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt

