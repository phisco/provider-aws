# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC0-1.0

name: Uptest All

on:
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.21'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

jobs:
  detect-api-groups:
    runs-on: ubuntu-22.04
    outputs:
      api_groups: ${{ steps.api-groups.outputs.list }}
    steps:
      - name: Checkout
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4
        with:
          submodules: true
      - name: Detect Api Groups
        id: api-groups
        run: |
          export API_GROUPS=""
          for i in $(ls -d examples/*/); do API_GROUPS="${API_GROUPS},${i}"; done
          
          OUTPUT=$(python3 -c "\
          import os, sys; \
          value = os.getenv('API_GROUPS'); \
          list = value.split(','); \
          print(list[1:]); \
          ")
          echo "Api Groups: $OUTPUT"
          echo "list=${OUTPUT}" >> $GITHUB_OUTPUT

  uptest:
    runs-on: ubuntu-22.04
    needs: detect-api-groups
    strategy:
      fail-fast: false
      matrix:
        api-groups: ${{ fromJson(needs.detect-api-groups.outputs.api_groups) }}
        exclude:
          - api-groups: examples/providerconfig/
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-uptest-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-uptest-

      - name: Cache Go Dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Prepare The Example List
        id: prepare-example-list
        run: |
          cd ..
          EXAMPLE_LIST=""
          EXAMPLE_LIST="${EXAMPLE_LIST},$(find ${{ matrix.api-groups }} -name '*.yaml' | tr '\n' ',')"
          echo "example-list=${EXAMPLE_LIST:1}" >> $GITHUB_OUTPUT
          echo "Examples: ${EXAMPLE_LIST:1}"

      - name: Run Uptest
        id: run-uptest
        env:
          UPTEST_AWS_CREDS: ${{ secrets.UPTEST_AWS_CREDS }}
          EXAMPLE_LIST: ${{ needs.get-example-list.outputs.example_list }}
          UPTEST_EXAMPLE_VALUE_REPLACEMENTS: ${{ secrets.UPTEST_EXAMPLE_VALUE_REPLACEMENTS }}
          DUMP_DIRECTORY: "./_output/cluster-dump"
        run: make uptest

      - name: Collect Cluster Dump
        if: always()
        run: |
          export DUMP_DIRECTORY=./_output/cluster-dump
          make cluster_dump

      - name: Upload Cluster Dump
        if: always()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          name: cluster-dump-aws
          path: ./_output/cluster-dump

      - name: Cleanup
        if: always()
        run: |
          kubectl delete managed --all

  report:
    runs-on: ubuntu-22.04
    needs: uptest
    if: always()
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4
        with:
          submodules: true
      - name: Manual Intervention Report
        run: |
          echo "Total Resources for AWS: $(cat examples/*/* | grep -o "kind: " | wc -l)"
          echo "Number of Skipped Resources: $(grep -r -o "upjet.upbound.io/manual-intervention" examples/* | wc -l)"
          echo "Skipped Manifests (Manual Intervention): $(grep -r -o "upjet.upbound.io/manual-intervention" examples/*)"
      - name: Coverage Report
        run: |
          OUTPUT=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs | .[] | select(.name!="detect-api-groups" and .name!="report")  | .name + " -> " + .conclusion')
          FAILURE=$(echo ${OUTPUT} | grep -o 'failure' | wc -l)
          SUCCESS=$(echo ${OUTPUT} | grep -o 'success' | wc -l)
          echo "Success: ${SUCCESS}"
          echo "Failure: ${FAILURE}" 
          echo "${OUTPUT}"
